Option Explicit
'=================================================
' 関数名: fun_sisokusan1
' 説明  : 配列内の指定された2列に対して四則演算を行い、通貨型の結果を返す関数
'         ※計算結果は通貨型（Currency）配列で返されます
'         ※不正な演算子や列名エラー時は CVErr(xlErrValue) を返します
'=================================================

Function fun_sisokusan1(arrData As Variant, _
                        colName1 As String, _
                        colName2 As String, _
                        operation As String, _
                        Optional doRound As Boolean = False, _
                        Optional roundDigits As Integer = 0) As Variant

    '---------------------------------------------
    ' 引数説明
    ' arrData     : 元の2次元配列（1行目はタイトル）
    ' colName1    : 計算対象列1の列名（タイトル行に一致する名前）
    ' colName2    : 計算対象列2の列名
    ' operation   : 四則演算の種類 → "add", "sub", "mul", "div"
    ' doRound     : 四捨五入を行うか（省略可、デフォルト: False）
    ' roundDigits : 四捨五入する桁数（省略可、デフォルト: 0）
    '
    ' 戻り値      : 計算結果の1次元Currency型配列（行単位で1つの値を返す）
    '               エラー時は CVErr(xlErrValue)
    '
    ' 呼び出し例：
    '     Dim arr1 As Variant
    '     arr1 = fun_sisokusan1(arr1, "金額1", "金額2", "mul", True, 0)
    '---------------------------------------------

    Dim result() As Currency
    Dim col1Index As Long, col2Index As Long
    Dim i As Long, rowsCount As Long
    Dim tmpVal As Currency
    Dim op As String

    On Error GoTo ErrorHandler

    col1Index = GetColIndex(arrData, colName1)
    col2Index = GetColIndex(arrData, colName2)

    If col1Index = -1 Or col2Index = -1 Then
        fun_sisokusan1 = CVErr(xlErrValue)
        Exit Function
    End If

    rowsCount = UBound(arrData, 1)
    ReDim result(1 To rowsCount - 1)

    op = LCase(operation)

    For i = 2 To rowsCount
        Select Case op
            Case "add": tmpVal = arrData(i, col1Index) + arrData(i, col2Index)
            Case "sub": tmpVal = arrData(i, col1Index) - arrData(i, col2Index)
            Case "mul": tmpVal = arrData(i, col1Index) * arrData(i, col2Index)
            Case "div"
                If arrData(i, col2Index) <> 0 Then
                    tmpVal = arrData(i, col1Index) / arrData(i, col2Index)
                Else
                    tmpVal = 0
                End If
            Case Else
                fun_sisokusan1 = CVErr(xlErrValue)
                Exit Function
        End Select

        If doRound Then tmpVal = Round(tmpVal, roundDigits)
        result(i - 1) = tmpVal
    Next i

    fun_sisokusan1 = result
    Exit Function

ErrorHandler:
    fun_sisokusan1 = CVErr(xlErrValue)
End Function

'=================================================
' 関数名: GetColIndex
' 説明  : 配列の1行目（タイトル行）から、指定された列名に一致する列番号を返す関数
'         列名が見つからない場合は -1 を返す
' 引数   : arr      - 2次元配列（1行目にタイトルがあること）
'         colName  - 探したい列名（文字列）
' 戻り値 : 該当列の番号（Long型）、見つからない場合は -1
' 呼び出し例：GetColIndex(arr1, "金額1") → 3（例）
'=================================================
Function GetColIndex(arr As Variant, colName As String) As Long
    Dim j As Long
    GetColIndex = -1
    For j = LBound(arr, 2) To UBound(arr, 2)
        If arr(1, j) = colName Then
            GetColIndex = j
            Exit Function
        End If
    Next j
End Function

'=================================================
' 関数名: IsValueEqual
' 説明  : 指定された列の値が、指定の値と一致するかを判定する関数
' 引数   : arr      - 2次元配列
'         row      - チェック対象の行番号
'         colName  - 列名（タイトル行から列番号を取得）
'         expected - 比較対象の値
' 戻り値 : 一致する場合は True、一致しない場合は False
' 呼び出し例：IsValueEqual(arr1, 5, "ステータス", "ブラック")
'=================================================
Function IsValueEqual(arr As Variant, row As Long, colName As String, expected As Variant) As Boolean
    Dim colIndex As Long
    colIndex = GetColIndex(arr, colName)
    If colIndex = -1 Then
        IsValueEqual = False
        Exit Function
    End If
    IsValueEqual = (arr(row, colIndex) = expected)
End Function

'=================================================
' 関数名: IsBlank
' 説明  : 指定された列が空白かどうかを判定する関数
' 引数   : arr     - 2次元配列
'         row     - チェック対象の行番号
'         colName - 列名
' 戻り値 : 空白の場合は True、そうでなければ False
' 呼び出し例：IsBlank(arr1, 4, "コメント")
'=================================================
Function IsBlank(arr As Variant, row As Long, colName As String) As Boolean
    Dim colIndex As Long
    colIndex = GetColIndex(arr, colName)
    If colIndex = -1 Then
        IsBlank = False
        Exit Function
    End If
    IsBlank = (Trim(arr(row, colIndex) & "") = "")
End Function

'=================================================
' 関数名: IsLessThan
' 説明  : 指定された列の値が、指定した閾値未満かどうかを判定する関数
' 引数   : arr       - 2次元配列
'         row       - チェック対象の行番号
'         colName   - 列名
'         threshold - 比較する値（Double型）
' 戻り値 : 未満の場合は True、それ以外は False
' 呼び出し例：IsLessThan(arr1, 6, "金額", 0)
'=================================================
Function IsLessThan(arr As Variant, row As Long, colName As String, threshold As Double) As Boolean
    Dim colIndex As Long
    colIndex = GetColIndex(arr, colName)
    If colIndex = -1 Then
        IsLessThan = False
        Exit Function
    End If
    If IsNumeric(arr(row, colIndex)) Then
        IsLessThan = (arr(row, colIndex) < threshold)
    Else
        IsLessThan = False
    End If
End Function

'=================================================
' 関数名: IsInList
' 説明  : 指定された列の値が、指定されたリストの中に含まれるかを判定する関数
' 引数   : arr     - 2次元配列
'         row     - チェック対象の行番号
'         colName - 列名
'         list    - 判定対象となる配列（Array）
' 戻り値 : リスト内に一致する値があれば True、それ以外は False
' 呼び出し例：IsInList(arr1, 3, "部署", Array("総務", "人事"))
'=================================================
Function IsInList(arr As Variant, row As Long, colName As String, list As Variant) As Boolean
    Dim colIndex As Long, i As Long
    colIndex = GetColIndex(arr, colName)
    If colIndex = -1 Then
        IsInList = False
        Exit Function
    End If
    For i = LBound(list) To UBound(list)
        If arr(row, colIndex) = list(i) Then
            IsInList = True
            Exit Function
        End If
    Next i
    IsInList = False
End Function

